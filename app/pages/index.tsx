import { BN, Program, Provider, utils } from '@project-serum/anchor';
import { Commitment, Connection, PublicKey, LAMPORTS_PER_SOL, SYSVAR_CLOCK_PUBKEY, SystemProgram, clusterApiUrl } from '@solana/web3.js';
import { lighten } from 'polished';
import { Button, Grid, makeStyles } from '@material-ui/core';
import { PendingTransaction } from '@saberhq/solana-contrib';
import { ConnectWalletButton } from '@gokiprotocol/walletkit';
import { useConnectedWallet, useSolana } from '@saberhq/use-solana';
import styled from '@emotion/styled';
import { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { useCallback, useEffect, useState } from 'react';
import invariant from 'tiny-invariant';

import styles from '../styles/Home.module.css';

import idl from '../../target/idl/protocol.json';
import { Protocol } from '../../target/types/protocol';

const WalletInfo = styled.div`
  background: ${lighten(0.7, '#282c34')};
  padding: 12px 24px;
  color: black;
  border-radius: 8px;
  font-size: 16px;
  text-align: left;
`;

const Index: NextPage = () => {
  const { walletProviderInfo, disconnect, providerMut, network, setNetwork } = useSolana();
  const wallet = useConnectedWallet();
  const [balance, setBalance] = useState<number | null>(null);

  const refetchSOL = useCallback(async () => {
    if (wallet && providerMut) {
      setBalance(await providerMut.connection.getBalance(wallet.publicKey));
    }
  }, [providerMut, wallet]);

  async function getProgram(provider: Provider): Program<Protocol> {
    const programId: PublicKey = new PublicKey('Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS');
    return new Program(idl, programId, provider);
  }

  useEffect(() => {
    void refetchSOL();
  }, [refetchSOL]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className={styles.main}>
        { wallet ? '' : <ConnectWalletButton /> }
        <div className={styles.walletButtons}>
          { wallet ? (
            <WalletInfo>
              <h3>Connected Wallet</h3>
              <ul>
                <li>Wallet key: {wallet?.publicKey?.toString()}</li>
                <li>Provider: {walletProviderInfo?.name}</li>
                <li>Network: {network}</li>
                <li>
                  Balance:{' '}
                  {typeof balance === 'number'
                    ? `${(balance / LAMPORTS_PER_SOL).toLocaleString()} SOL`
                    : '--'}
                </li>
              </ul>
              <Button onClick={disconnect}>Disconnect</Button>
              <Button onClick={() => { setNetwork('localnet'); }}>
                Switch to Localnet
              </Button>
              <Button onClick={() => { setNetwork('devnet'); }}>
                Switch to Devnet
              </Button>
              <Button
                disabled={!providerMut}
                onClick={async () => {
                  invariant(providerMut, 'providerMut');
                  const txSig = await providerMut.connection.requestAirdrop(providerMut.wallet.publicKey, LAMPORTS_PER_SOL);
                  await new PendingTransaction(providerMut.connection, txSig).wait();
                  await refetchSOL();
                }}
              >
                Request 1 SOL
              </Button>
              <Button
                disabled={!providerMut}
                onClick={async () => {
                  invariant(providerMut, 'providerMut');
                  const tx = await createInitMintInstructions({provider: providerMut, mintKP: Keypair.generate(), decimals: 9});
                  await tx.confirm();
                  await refetchSOL();
                }}
              >
                Send Transaction
              </Button>
              <Button
                disabled={!providerMut}
                onClick={async () => {
                  invariant(providerMut, 'providerMut');
                  const program = await getProgram({provider: providerMut });
                  await program.rpc.initialize();
                }}
              >
              Initialize
              </Button>
            </WalletInfo>
          ) : (
            <WalletInfo>
              <p>Connect a wallet above.</p>
            </WalletInfo>
          )}
        </div>
      </main>
      <footer className={styles.footer}>
        <a href='#' target='_blank' rel='noopener noreferrer'>
          Powered by{' '}
          <span className={styles.logo}>
            <Image src='/logo_solana.svg' alt='Vercel Logo' height={20} width='100%' />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Index;
